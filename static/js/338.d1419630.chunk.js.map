{"version":3,"file":"static/js/338.d1419630.chunk.js","mappings":"oNA4EA,GAtEkBA,EAAAA,EAAAA,GAAgB,CAChCC,uBAAuBC,EAAAA,EAAAA,IAAO,MAAO,CACnCC,KAAM,eACNC,KAAM,OACNC,kBAAmB,SAACC,EAAOC,GACzB,IACEC,EACEF,EADFE,WAEF,MAAO,CAACD,EAAOE,KAAMF,EAAO,WAAD,QAAYG,EAAAA,EAAAA,GAAWC,OAAOH,EAAWI,aAAeJ,EAAWK,OAASN,EAAOM,MAAOL,EAAWM,gBAAkBP,EAAOO,mBAG7JC,cAAe,SAAAC,GAAO,OAAID,EAAAA,EAAAA,GAAc,CACtCT,MAAOU,EACPb,KAAM,oB,+ECPJc,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MACfC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,cAAY,WAC/BL,EAAS,YAAD,OAAaM,mBAAmBP,KACxCG,EAASK,EAAAA,GAAAA,WAAyBR,MACjC,CAACC,EAAUD,EAAOG,IACrB,OACE,SAACM,EAAA,GAAD,CAAUC,QAAM,EAACC,WAAW,aAAaC,QAASP,EAAlD,UACE,SAACQ,EAAA,EAAD,CACEC,SACE,SAACC,EAAA,EAAD,CAAYC,UAAU,OAAOC,QAAQ,KAAKC,MAAM,cAAhD,SACGlB,SAQb,GAAemB,EAAAA,EAAAA,MAAKpB,GCtBdqB,GAAsBpC,EAAAA,EAAAA,IAAOqC,EAAPrC,EAC1B,gBAAGsC,EAAH,EAAGA,MAAH,+BACaA,EAAMC,QAAQ,GAD3B,8BAEgBD,EAAMC,QAAQ,GAF9B,UAMIC,GAAiBxC,EAAAA,EAAAA,IAAOyC,EAAAA,EAAPzC,EACrB,gBAAGsC,EAAH,EAAGA,MAAH,sDAEoBA,EAAMI,QAAQC,WAAWC,MAF7C,UAMIC,EAAU,WACd,IAAMC,GAAgBC,EAAAA,EAAAA,KACpB,SAACC,GAAD,OAAsBA,EAAMC,OAAOC,eAErC,OACE,UAACd,EAAD,CAAqB1B,SAAS,KAA9B,WACE,UAACqB,EAAA,EAAD,CAAYC,UAAU,KAAtB,8BACoBmB,EAAAA,GADpB,eAGA,SAACX,EAAD,UACGM,EAAcM,KAAI,SAACC,GAAD,OACjB,SAAC,EAAD,CAAwBrC,MAAOqC,GAAbA,YAO5B,GAAelB,EAAAA,EAAAA,MAAKU","sources":["../node_modules/.pnpm/@mui+material@5.10.8_ikcgkdnp4bn3rgptamntbhbo7e/node_modules/@mui/material/esm/Container/Container.js","components/HistoryItem.tsx","views/History.tsx"],"sourcesContent":["/* eslint-disable material-ui/mui-name-matches-component-name */\nimport PropTypes from 'prop-types';\nimport { createContainer } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nconst Container = createContainer({\n  createStyledComponent: styled('div', {\n    name: 'MuiContainer',\n    slot: 'Root',\n    overridesResolver: (props, styles) => {\n      const {\n        ownerState\n      } = props;\n      return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n    }\n  }),\n  useThemeProps: inProps => useThemeProps({\n    props: inProps,\n    name: 'MuiContainer'\n  })\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;","import ListItem from \"@mui/material/ListItem\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Typography from \"@mui/material/Typography\";\nimport { memo, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { searchActions } from \"store/slices/search.slice\";\n\ninterface Props {\n  value: string;\n}\n\nconst HistoryItem = ({ value }: Props) => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const clickHandler = useCallback(() => {\n    navigate(`/package/${encodeURIComponent(value)}`);\n    dispatch(searchActions.setHistory(value));\n  }, [navigate, value, dispatch]);\n  return (\n    <ListItem button alignItems=\"flex-start\" onClick={clickHandler}>\n      <ListItemText\n        primary={\n          <Typography component=\"span\" variant=\"h6\" color=\"textPrimary\">\n            {value}\n          </Typography>\n        }\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(HistoryItem);\n","import { Typography } from \"@mui/material\";\nimport Container from \"@mui/material/Container\";\nimport List from \"@mui/material/List\";\nimport { styled } from \"@mui/material/styles\";\nimport HistoryItem from \"components/HistoryItem\";\nimport { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"store\";\nimport { maxHistory } from \"store/slices/search.slice\";\n\nconst CustomizedContainer = styled(Container)(\n  ({ theme }) => `\npadding-top: ${theme.spacing(8)};\npadding-bottom: ${theme.spacing(8)};\n`,\n);\n\nconst CustomizedList = styled(List)(\n  ({ theme }) => `\n  width: 100%;\n  background-color: ${theme.palette.background.paper};\n`,\n);\n\nconst History = () => {\n  const searchHistory = useSelector(\n    (state: RootState) => state.search.historyList,\n  );\n  return (\n    <CustomizedContainer maxWidth=\"md\">\n      <Typography component=\"h2\">\n        Showing previous {maxHistory} history\n      </Typography>\n      <CustomizedList>\n        {searchHistory.map((text) => (\n          <HistoryItem key={text} value={text} />\n        ))}\n      </CustomizedList>\n    </CustomizedContainer>\n  );\n};\n\nexport default memo(History);\n"],"names":["createContainer","createStyledComponent","styled","name","slot","overridesResolver","props","styles","ownerState","root","capitalize","String","maxWidth","fixed","disableGutters","useThemeProps","inProps","HistoryItem","value","navigate","useNavigate","dispatch","useDispatch","clickHandler","useCallback","encodeURIComponent","searchActions","ListItem","button","alignItems","onClick","ListItemText","primary","Typography","component","variant","color","memo","CustomizedContainer","Container","theme","spacing","CustomizedList","List","palette","background","paper","History","searchHistory","useSelector","state","search","historyList","maxHistory","map","text"],"sourceRoot":""}