{"version":3,"file":"static/js/4.92905d19.chunk.js","mappings":"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","sources":["hooks/helpers/useStateSimple.ts","hooks/helpers/useObservable.ts","utils/getPackageInfo.ts","utils/semverCompare.ts","observables/fetchPackage.ts","observables/getDependencies.ts","observables/operators/distinctExpand.ts","components/dependency/ConcurrencyInput.tsx","components/dependency/DependenciesList.tsx","components/dependency/FilterInput.tsx","components/dependency/Dependency.tsx","components/dependency/useDependency.ts","components/dependency/index.ts","components/version/ReactWindowAutoComplete.tsx","components/version/VersionSelect.tsx","components/version/Version.tsx","components/version/useVersion.ts","components/version/index.ts","views/Package.tsx","hooks/useUpdateTitle.ts"],"sourcesContent":["import { useReducer } from \"react\";\n\n/*\nthis is a helper hook that act similar to setState in React\n*/\n\nfunction reducer<T>(currentState: T, newState: Partial<T>) {\n  return {\n    ...currentState,\n    ...newState,\n  };\n}\n\nexport default function useStateSimple<T>(initialState: () => T) {\n  return useReducer<React.Reducer<T, Partial<T>>, null>(\n    reducer,\n    null,\n    initialState,\n  );\n}\n","import { useState } from \"react\";\nimport { Observable } from \"rxjs\";\nimport { useEffectOnce } from \"./useEffectOnce\";\nimport useStateSimple from \"./useStateSimple\";\n\n/*\na helper hook to observe an Observable\n*/\n\ninterface ObserverState<ReturnData> {\n  readonly data?: ReturnData;\n  readonly error?: Error;\n  readonly completed: boolean;\n}\n\nfunction getInitialState<ReturnData>(): ObserverState<ReturnData> {\n  return {\n    data: undefined,\n    error: undefined,\n    completed: false,\n  };\n}\n\nexport default function useObservable<ReturnData>(\n  initialObservable?: Observable<ReturnData> | (() => Observable<ReturnData>),\n): [\n  ObserverState<ReturnData>,\n  React.Dispatch<React.SetStateAction<Observable<ReturnData>>>,\n] {\n  const [observable, setObservable] = useState<\n    Observable<ReturnData> | undefined\n  >(initialObservable);\n  const [state, setState] =\n    useStateSimple<ObserverState<ReturnData>>(getInitialState);\n  useEffectOnce(() => {\n    if (!observable) {\n      return;\n    }\n    const subscription = observable.subscribe({\n      next(data) {\n        setState({ data });\n      },\n      error(error: Error) {\n        setState({ error });\n      },\n      complete() {\n        setState({ completed: true });\n      },\n    });\n    return () => {\n      setState(getInitialState());\n      subscription.unsubscribe();\n    };\n  }, [observable, setState]);\n\n  return [\n    state,\n    setObservable as React.Dispatch<\n      React.SetStateAction<Observable<ReturnData>>\n    >,\n  ];\n}\n","export const getPackageInfo = (packageString: string) => {\n  const lastSeperatorIndex = packageString.lastIndexOf(\"@\");\n  const packageName = packageString.substring(0, lastSeperatorIndex);\n  const packageVersionRange = packageString\n    .substring(lastSeperatorIndex + 1)\n    // remove invalid character \",\" in range\n    .replace(/,/g, \"\");\n  return {\n    packageName,\n    packageVersionRange,\n  };\n};\n","// from semver-compare\nexport function semverCompare(a: string, b: string) {\n  const pa = a.split(\".\");\n  const pb = b.split(\".\");\n  for (let i = 0; i < 3; i++) {\n    const na = Number(pa[i]);\n    const nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n  return 0;\n}\n","import { Observable } from \"rxjs\";\nimport { fromFetch } from \"rxjs/fetch\";\nimport { finalize, mergeMap, share } from \"rxjs/operators\";\n\nconst registryUrl = \"https://npm-proxy.glitch.me/registry/\";\n// backup url\n// const registryUrl = \"https://registry.npmjs.cf/\";\n\ninterface PackageMetaData {\n  name: string;\n  dependencies?: {\n    [key: string]: string;\n  };\n}\n\ninterface AllVersionsPackageMetaData {\n  \"dist-tags\": {\n    [key: string]: string;\n  };\n  versions: {\n    [key: string]: PackageMetaData;\n  };\n}\n\nexport type FetchResult = PackageMetaData | AllVersionsPackageMetaData;\n\nconst registryCache: { [key: string]: Observable<FetchResult> } = {};\n\nexport function isAllVersionPackageMetaData(\n  result: FetchResult,\n): result is AllVersionsPackageMetaData {\n  return Boolean((result as AllVersionsPackageMetaData).versions);\n}\n\n// will get from cache and share the same Observable if still in fetching\nconst fetchPackage = (packageQuery: string): Observable<FetchResult> => {\n  let cache = registryCache[packageQuery];\n  if (!cache) {\n    cache = registryCache[packageQuery] = fromFetch(\n      `${registryUrl}${packageQuery}`,\n    ).pipe(\n      mergeMap((res: Response) => res.json()),\n      finalize(() => {\n        delete registryCache[packageQuery];\n      }),\n      share(),\n    );\n  }\n  return cache;\n};\n\nexport default fetchPackage;\n","import { firstValueFrom, from, of } from \"rxjs\";\nimport { distinct, map, mergeMap, retry, scan, take } from \"rxjs/operators\";\nimport maxSatisfying from \"semver/ranges/max-satisfying\";\nimport { getPackageInfo } from \"utils/getPackageInfo\";\nimport { semverCompare } from \"utils/semverCompare\";\nimport fetchPackage, {\n  FetchResult,\n  isAllVersionPackageMetaData,\n} from \"./fetchPackage\";\nimport { distinctExpand } from \"./operators\";\n\nconst DEPENDENCIES_FIELD = \"dependencies\";\nconst DISTRIBUTION_TAGS = \"dist-tags\";\nconst LATEST_TAG = \"latest\";\n\n// convert dependencies Object to Set with `package@version` format\nconst getDependenciesInSet = (dependencies?: { [key: string]: string }) => {\n  const results = new Set<string>();\n  if (dependencies == null) {\n    return results;\n  }\n  for (const [key, value] of Object.entries(dependencies)) {\n    results.add(`${key}@${value}`);\n  }\n  return results;\n};\n\n// Observable to get package data from registry cache or online registry\nconst retryFetchPackage$ = (\n  packageName: string,\n  packageVersionRange?: string,\n) =>\n  // get all versions if packageVersion exists, if not just get latest\n  of(\n    `${packageName}${\n      // check if packageName has \"/\" eg. @angular/core\n      packageVersionRange ? `` : `/${LATEST_TAG}`\n    }`,\n  ).pipe(\n    mergeMap(fetchPackage),\n    // retry 2 times if fail\n    retry({\n      count: 2,\n      resetOnSuccess: true,\n    }),\n  );\n\n// use semver with packageVersionRange to get the max satisfying version\n// if there is no such version, use latest tag version\n// then use that version to get the correct dependencies\nconst getDependenciesFromFetchResult =\n  (packageName: string, packageVersionRange?: string) =>\n  (packageData: FetchResult) => {\n    if (isAllVersionPackageMetaData(packageData)) {\n      if (packageVersionRange) {\n        const maxVersion = maxSatisfying(\n          Object.keys(packageData.versions),\n          packageVersionRange,\n        );\n        if (maxVersion) {\n          return getDependenciesInSet(\n            packageData.versions[maxVersion][DEPENDENCIES_FIELD],\n          );\n        }\n        // eslint-disable-next-line no-console\n        console.warn(\n          `no such version ${packageVersionRange} for ${packageName}, use latest tag`,\n        );\n      }\n      const latestVersion = packageData[DISTRIBUTION_TAGS][LATEST_TAG];\n      const latestVersionMeta = packageData.versions[latestVersion];\n      if (latestVersionMeta) {\n        return getDependenciesInSet(latestVersionMeta[DEPENDENCIES_FIELD]);\n      }\n      console.warn(`no latest version for ${packageName}`); // eslint-disable-line no-console\n      return new Set<string>();\n    }\n    return getDependenciesInSet(packageData[DEPENDENCIES_FIELD]);\n  };\n\n// Observable that returns all the dependencies for one package in `package@version` format\nconst getDependencies$ = (packageName: string, packageVersionRange?: string) =>\n  retryFetchPackage$(packageName, packageVersionRange).pipe(\n    map(getDependenciesFromFetchResult(packageName, packageVersionRange)),\n    // convert from Set to Stream\n    mergeMap((dependenciesInSet) => from(dependenciesInSet)),\n  );\n\nconst getMaxVersionFromFetchResult =\n  (packageName: string, packageVersionRange: string) =>\n  (packageData: FetchResult) => {\n    if (isAllVersionPackageMetaData(packageData)) {\n      const maxVersion =\n        maxSatisfying(Object.keys(packageData.versions), packageVersionRange) ||\n        packageVersionRange;\n      return `${packageName}@${maxVersion}`;\n    }\n    return `${packageName}@${packageVersionRange}`;\n  };\n\n// Observable that get all dependencies for the package recursively\nexport const getAllDependencies$ = (\n  packageString: string,\n  showDifferentVersion: boolean,\n  concurrency: number,\n  packageVersion?: string,\n) => {\n  return getDependencies$(packageString, packageVersion).pipe(\n    // get the dependencies of dependency, with concurrency\n    distinctExpand((dependency) => {\n      const { packageName, packageVersionRange } = getPackageInfo(dependency);\n      return getDependencies$(packageName, packageVersionRange);\n    }, concurrency),\n    // get the version number based on showDifferentVersion\n    mergeMap((dependency) => {\n      const { packageName, packageVersionRange } = getPackageInfo(dependency);\n      if (!showDifferentVersion) {\n        return of(packageName);\n      }\n      return retryFetchPackage$(packageName, packageVersionRange).pipe(\n        map(getMaxVersionFromFetchResult(packageName, packageVersionRange)),\n      );\n    }, concurrency),\n    // only show distinct value\n    distinct(),\n    // get maximum 1000 packages, one good example is bloater\n    take(1000),\n    scan((acc: string[], value: string) => [...acc, value], []),\n    map((value) => value.sort()),\n  );\n};\n\nexport const getAllVersions$ = (packageString: string) => {\n  return retryFetchPackage$(packageString, \"all\").pipe(\n    map((packageData) => {\n      if (isAllVersionPackageMetaData(packageData)) {\n        return {\n          versions: Object.keys(packageData.versions).sort(semverCompare),\n          latest: packageData[DISTRIBUTION_TAGS][LATEST_TAG],\n        } as PackageVersionInfo;\n      }\n      throw new Error(\"couldn't find all versions package.json\");\n    }),\n  );\n};\n\nexport const getAllVersionsAsync = (packageString: string) => {\n  return firstValueFrom(getAllVersions$(packageString));\n};\n","import { EMPTY, ObservableInput, SchedulerLike } from \"rxjs\";\nimport { expand } from \"rxjs/operators\";\n\n// custom operator that only expand if the value is distinct from previous values\nexport const distinctExpand = <T>(\n  fn: (value: T) => ObservableInput<T>,\n  concurrent?: number,\n  scheduler?: SchedulerLike,\n) => {\n  const set = new Set<T>();\n  return expand(\n    (value: T) => {\n      if (set.has(value)) {\n        return EMPTY;\n      }\n      set.add(value);\n      return fn(value);\n    },\n    concurrent,\n    scheduler,\n  );\n};\n","import TextField from \"@mui/material/TextField\";\nimport { ChangeEvent, memo, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"store\";\nimport { searchActions } from \"store/slices/search.slice\";\n\nconst ConcurrencyInput = () => {\n  const dispatch = useDispatch();\n  const concurrency = useSelector(\n    (state: RootState) => state.search.concurrency,\n  );\n  const onChangeHandler = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      dispatch(searchActions.setConcurrency(Number(event.target.value)));\n    },\n    [dispatch],\n  );\n  return (\n    <TextField\n      margin=\"normal\"\n      sx={{ minWidth: 100, marginRight: \"16px\" }}\n      label=\"Concurrency\"\n      type=\"number\"\n      value={concurrency}\n      onChange={onChangeHandler}\n      inputProps={{ min: 1, max: 10, style: { textAlign: \"center\" } }}\n    />\n  );\n};\n\nexport default memo(ConcurrencyInput);\n","import Tooltip from \"@mui/material/Tooltip\";\nimport { Component } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport {\n  FixedSizeList as List,\n  ListChildComponentProps,\n  shouldComponentUpdate,\n} from \"react-window\";\nimport { RootState } from \"store\";\n\nclass RowRenderer extends Component<ListChildComponentProps<string[]>> {\n  shouldComponentUpdate = shouldComponentUpdate.bind(this);\n\n  render() {\n    const { data, index, style } = this.props;\n    const dependency = data.at(index) ?? \"\";\n    return (\n      <Tooltip title={dependency}>\n        <div\n          className=\"text-center\"\n          style={{\n            ...style,\n            overflow: \"hidden\",\n            whiteSpace: \"nowrap\",\n            textOverflow: \"ellipsis\",\n          }}\n        >\n          {dependency}\n        </div>\n      </Tooltip>\n    );\n  }\n}\n\nfunction itemKey(index: number, data: string[]) {\n  return data[index];\n}\n\ninterface Props {\n  data: string[];\n}\n\nconst DependenciesList = ({ data }: Props) => {\n  const filter = useSelector((state: RootState) => state.search.filter);\n  const filteredData =\n    filter === \"\" ? data : data.filter((d) => d.includes(filter));\n  return (\n    <div className=\"flex-grow-1 flex-shrink-1 align-self-stretch\">\n      <AutoSizer>\n        {({ height, width }) => (\n          <List\n            width={width}\n            height={height}\n            itemCount={filteredData.length}\n            itemSize={30}\n            itemData={filteredData}\n            itemKey={itemKey}\n          >\n            {RowRenderer}\n          </List>\n        )}\n      </AutoSizer>\n    </div>\n  );\n};\n\nexport default DependenciesList;\n","import TextField from \"@mui/material/TextField\";\nimport { memo, useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"store\";\nimport { searchActions } from \"store/slices/search.slice\";\n\nconst FilterInput = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector((state: RootState) => state.search.filter);\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      dispatch(searchActions.setFilter(event.target.value));\n    },\n    [dispatch],\n  );\n  useEffect(() => {\n    return () => {\n      dispatch(searchActions.setFilter(\"\"));\n    };\n  }, [dispatch]);\n  return (\n    <TextField\n      margin=\"normal\"\n      fullWidth={true}\n      label=\"Filter\"\n      value={filter}\n      onChange={onChange}\n      inputProps={{\n        style: { textAlign: \"center\" },\n      }}\n    />\n  );\n};\n\nexport default memo(FilterInput);\n","import Box from \"@mui/material/Box\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport { memo, useCallback, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"store\";\nimport ConcurrencyInput from \"./ConcurrencyInput\";\nimport DependenciesList from \"./DependenciesList\";\nimport FilterInput from \"./FilterInput\";\nimport useDependency from \"./useDependency\";\n\ninterface Props {\n  packageName: string;\n}\n\nconst Dependency = ({ packageName }: Props) => {\n  const [diffVersion, setDiffVersion] = useState(true);\n  const onChangeHandler = useCallback(() => {\n    setDiffVersion((prevState) => !prevState);\n  }, []);\n\n  const version = useSelector((state: RootState) => state.search.version);\n\n  const { dependencies } = useDependency(packageName, diffVersion);\n  const { data, error, completed } = dependencies;\n  if (error) {\n    console.error(error); // eslint-disable-line no-console\n    return <div>Error: {error.message}</div>;\n  }\n  return (\n    <>\n      <FormGroup row sx={{ alignItems: \"center\", justifyContent: \"center\" }}>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={diffVersion}\n              onChange={onChangeHandler}\n              value=\"showDifferentVersion\"\n              color=\"primary\"\n            />\n          }\n          label=\"Show Different Version\"\n        />\n        <ConcurrencyInput />\n      </FormGroup>\n      {data && (\n        <>\n          <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n            Found {data.length} dependencies for{\" \"}\n            {`${packageName}@${version ?? \"\"}`}\n            {!completed && (\n              <CircularProgress\n                sx={{ marginLeft: 1, height: \"unset !important\" }}\n                className=\"my-2\"\n              />\n            )}\n          </Box>\n          <FilterInput />\n          <DependenciesList data={data} />\n        </>\n      )}\n      {completed && !data && <div>No dependencies</div>}\n    </>\n  );\n};\n\nexport default memo(Dependency);\n","import useObservable from \"hooks/helpers/useObservable\";\nimport { getAllDependencies$ } from \"observables/getDependencies\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"store\";\n\nexport default function useDependency(\n  packageName: string,\n  diffVersion: boolean,\n) {\n  const concurrency = useSelector(\n    (state: RootState) => state.search.concurrency,\n  );\n  const version = useSelector((state: RootState) => state.search.version);\n  const [dependencies, setDependencies] = useObservable<string[]>();\n\n  useEffect(() => {\n    if (version == null) return;\n    setDependencies(\n      getAllDependencies$(packageName, diffVersion, concurrency, version),\n    );\n  }, [version, setDependencies, packageName, diffVersion, concurrency]);\n\n  return {\n    dependencies,\n  };\n}\n","import Dependency from \"./Dependency\";\n\nexport default Dependency;\n","/* eslint-disable */\n// copy from https://mui.com/components/autocomplete/#virtualization\n// modified to use FixedSizeList and use custom option\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport Typography from \"@mui/material/Typography\";\nimport { useTheme } from \"@mui/material/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport React from \"react\";\nimport { FixedSizeList, ListChildComponentProps } from \"react-window\";\n\nconst LISTBOX_PADDING = 8; // px\n\nfunction renderRow(props: ListChildComponentProps) {\n  const { data, index, style } = props;\n  const dataSet = data[index];\n  const inlineStyle: React.CSSProperties = {\n    ...style,\n    top: (style.top as number) + LISTBOX_PADDING,\n  };\n\n  if (dataSet.hasOwnProperty(\"group\")) {\n    return (\n      <ListSubheader key={dataSet.key} component=\"div\" style={inlineStyle}>\n        {dataSet.group}\n      </ListSubheader>\n    );\n  }\n\n  return (\n    <Typography component=\"li\" {...dataSet[0]} noWrap style={inlineStyle}>\n      {dataSet[1].label}\n    </Typography>\n  );\n}\n\nconst OuterElementContext = React.createContext({});\n\nconst OuterElementType = React.forwardRef<HTMLDivElement>((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return <div ref={ref} {...props} {...outerProps} />;\n});\n\ninterface ListboxComponentProps extends React.HTMLAttributes<HTMLElement> {\n  selectedIndex: number;\n}\n\n// Adapter for react-window\nconst ListboxComponent: React.ForwardRefRenderFunction<\n  HTMLDivElement,\n  ListboxComponentProps\n> = (props, ref) => {\n  const { children, selectedIndex, ...other } = props;\n  const itemData: React.ReactNode[] = [];\n  (children as React.ReactNode[]).forEach((item: React.ReactNode) => {\n    itemData.push(item);\n  });\n\n  const theme = useTheme();\n  const smUp = useMediaQuery(theme.breakpoints.up(\"sm\"), {\n    noSsr: true,\n  });\n  const itemCount = itemData.length;\n  const itemSize = smUp ? 36 : 48;\n  const height =\n    itemCount > 8 ? 8 * itemSize : itemCount * itemSize + 2 * LISTBOX_PADDING;\n\n  return (\n    <div ref={ref}>\n      <OuterElementContext.Provider value={other}>\n        <FixedSizeList\n          itemData={itemData}\n          height={height}\n          width=\"100%\"\n          outerElementType={OuterElementType}\n          innerElementType=\"ul\"\n          itemSize={itemSize}\n          overscanCount={5}\n          itemCount={itemCount}\n          initialScrollOffset={selectedIndex * itemSize}\n        >\n          {renderRow}\n        </FixedSizeList>\n      </OuterElementContext.Provider>\n    </div>\n  );\n};\n\nexport default React.forwardRef<HTMLDivElement, ListboxComponentProps>(\n  ListboxComponent,\n);\n","import Autocomplete, {\n  AutocompleteRenderInputParams,\n} from \"@mui/material/Autocomplete\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport { memo, useCallback } from \"react\";\nimport ListboxComponent from \"./ReactWindowAutoComplete\";\n\ninterface Props {\n  versionsCompleted: boolean;\n  versionsData?: VersionInfoWithOptions;\n  selectedVersion?: OptionType;\n  setSelectedVersion: (version?: OptionType) => void;\n  selectedIndex: number;\n}\n\nconst VersionSelect = ({\n  versionsCompleted,\n  versionsData,\n  selectedVersion,\n  setSelectedVersion,\n  selectedIndex,\n}: Props) => {\n  const onChangeHandler = useCallback(\n    (_event: unknown, option: OptionType | null) => {\n      if (option !== null) {\n        setSelectedVersion(option);\n      }\n    },\n    [setSelectedVersion],\n  );\n  const renderInput = useCallback(\n    (params: AutocompleteRenderInputParams) => (\n      <TextField {...params} label=\"Version\" />\n    ),\n    [],\n  );\n  if (!versionsCompleted || !versionsData) {\n    return null;\n  }\n  return (\n    <Box color=\"black\" sx={{ width: \"100%\" }}>\n      <Autocomplete\n        options={versionsData.options}\n        onChange={onChangeHandler}\n        value={selectedVersion}\n        renderInput={renderInput}\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        ListboxComponent={ListboxComponent}\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        ListboxProps={{ selectedIndex }}\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        renderOption={(props, option) => [props, option]}\n      />\n    </Box>\n  );\n};\n\nexport default memo(VersionSelect);\n","import { memo } from \"react\";\nimport VersionSelect from \"./VersionSelect\";\nimport useVersion from \"./useVersion\";\n\ninterface Props {\n  packageName: string;\n}\n\nconst Version = ({ packageName }: Props) => {\n  const { versions, selectedVersion, setSelectedVersion, selectedIndex } =\n    useVersion(packageName);\n  const { data, error, completed } = versions;\n  if (error) {\n    console.error(error); // eslint-disable-line no-console\n    return <div>Error: {error.message}</div>;\n  }\n  if (selectedVersion == null) return null;\n  return (\n    <VersionSelect\n      {...{\n        versionsCompleted: completed,\n        versionsData: data,\n        selectedVersion,\n        setSelectedVersion,\n        selectedIndex,\n      }}\n    />\n  );\n};\n\nexport default memo(Version);\n","import useObservable from \"hooks/helpers/useObservable\";\nimport { getAllVersions$ } from \"observables/getDependencies\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { map } from \"rxjs/operators\";\nimport { searchActions } from \"store/slices/search.slice\";\n\nfunction convertData(data: PackageVersionInfo): VersionInfoWithOptions {\n  return {\n    latest: data.latest,\n    options: data.versions.map((value) => ({\n      label: value,\n      value,\n    })),\n  };\n}\n\nexport default function useVersion(packageName: string) {\n  const dispatch = useDispatch();\n  const [selectedVersion, setSelectedVersion] = useState<OptionType>();\n  const [versions, setVersions] = useObservable<VersionInfoWithOptions>();\n\n  useEffect(() => {\n    setVersions(\n      getAllVersions$(packageName).pipe(map((data) => convertData(data))),\n    );\n  }, [packageName, setVersions]);\n\n  useEffect(() => {\n    if (versions.completed && versions.data) {\n      const latestVersion = versions.data.latest;\n      const latestOption = versions.data.options.find(\n        (option) => option.value === latestVersion,\n      );\n      setSelectedVersion(latestOption);\n    }\n  }, [versions]);\n\n  const selectedIndex = useMemo(() => {\n    const options = versions.data?.options;\n    return options == null || selectedVersion == null\n      ? -1\n      : options.indexOf(selectedVersion);\n  }, [versions.data, selectedVersion]);\n\n  useEffect(() => {\n    if (selectedVersion != null)\n      dispatch(searchActions.setVersion(selectedVersion.value));\n  }, [dispatch, selectedVersion]);\n\n  useEffect(() => {\n    return () => {\n      dispatch(searchActions.setVersion(null));\n    };\n  }, [dispatch]);\n\n  return {\n    versions,\n    selectedVersion,\n    setSelectedVersion,\n    selectedIndex,\n  };\n}\n","import Version from \"./Version\";\n\nexport default Version;\n","import Box from \"@mui/material/Box\";\nimport Dependency from \"components/dependency\";\nimport Version from \"components/version\";\nimport { useUpdateTitle } from \"hooks/useUpdateTitle\";\nimport { memo } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst Package = () => {\n  const params = useParams<\"packageName\">();\n  const { packageName = \"\" } = params;\n  const decodedPackageName = decodeURIComponent(packageName);\n  useUpdateTitle(decodedPackageName);\n  return (\n    <Box\n      sx={{\n        flexGrow: 1,\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"center\",\n      }}\n    >\n      <h2>{decodedPackageName}</h2>\n      <Version packageName={packageName} />\n      <Dependency packageName={packageName} />\n    </Box>\n  );\n};\n\nexport default memo(Package);\n","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { titleActions } from \"store/slices/title.slice\";\n\nexport const useUpdateTitle = (title: string) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(titleActions.setTitle(title));\n  }, [dispatch, title]);\n};\n"],"names":["reducer","currentState","newState","getInitialState","data","undefined","error","completed","useObservable","initialObservable","initialState","useState","observable","setObservable","useReducer","state","setState","useEffectOnce","subscription","subscribe","next","complete","unsubscribe","getPackageInfo","packageString","lastSeperatorIndex","lastIndexOf","packageName","substring","packageVersionRange","replace","semverCompare","a","b","pa","split","pb","i","na","Number","nb","isNaN","registryCache","isAllVersionPackageMetaData","result","Boolean","versions","packageQuery","cache","fromFetch","pipe","mergeMap","res","json","finalize","share","LATEST_TAG","getDependenciesInSet","dependencies","results","Set","Object","entries","key","value","add","retryFetchPackage$","of","fetchPackage","retry","count","resetOnSuccess","getDependencies$","map","packageData","maxVersion","maxSatisfying","keys","console","warn","latestVersion","DISTRIBUTION_TAGS","latestVersionMeta","getDependenciesFromFetchResult","dependenciesInSet","from","getAllDependencies$","showDifferentVersion","concurrency","packageVersion","fn","concurrent","scheduler","set","expand","has","EMPTY","distinctExpand","dependency","getMaxVersionFromFetchResult","distinct","take","scan","acc","sort","getAllVersions$","latest","Error","getAllVersionsAsync","firstValueFrom","ConcurrencyInput","dispatch","useDispatch","useSelector","search","onChangeHandler","useCallback","event","searchActions","target","TextField","margin","sx","minWidth","marginRight","label","type","onChange","inputProps","min","max","style","textAlign","memo","RowRenderer","shouldComponentUpdate","this","props","index","at","Tooltip","title","className","overflow","whiteSpace","textOverflow","Component","itemKey","filter","filteredData","d","includes","height","width","itemCount","length","itemSize","itemData","FilterInput","useEffect","fullWidth","Dependency","diffVersion","setDiffVersion","prevState","version","setDependencies","useDependency","message","FormGroup","row","alignItems","justifyContent","FormControlLabel","control","Checkbox","checked","color","Box","display","CircularProgress","marginLeft","renderRow","dataSet","inlineStyle","top","hasOwnProperty","ListSubheader","component","group","Typography","noWrap","OuterElementContext","React","OuterElementType","ref","outerProps","ListboxComponent","children","selectedIndex","other","forEach","item","push","theme","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","Provider","outerElementType","innerElementType","overscanCount","initialScrollOffset","VersionSelect","versionsCompleted","versionsData","selectedVersion","setSelectedVersion","_event","option","renderInput","params","Autocomplete","options","ListboxProps","renderOption","Version","setVersions","convertData","latestOption","find","useMemo","indexOf","useVersion","Package","useParams","decodedPackageName","decodeURIComponent","titleActions","useUpdateTitle","flexGrow","flexFlow"],"sourceRoot":""}